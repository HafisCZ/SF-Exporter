#!/usr/bin/env ruby

# frozen_string_literal: true

require 'httparty'
require 'fileutils'

class Synchronize
  include HTTParty

  PLAYA_CONFIG_URL = 'https://sfgame.net/config.json'
  PLAYA_TRANSLATION_URL = 'https://cdn.playa-games.com/res/sfgame3/lang/%<version>s/sfgame_%<language>s.bin'

  REGEXP_MONSTER = /^monster_name_(\d+)$/ 
  REGEXP_ITEM = /^item_type_(\d+)_(?:class_(\d+)_)?pic_(\d+)$/
  REGEXP_PET_REQUIREMENT = /^pet_requirements_(fire|water|earth|shadow|light)_(\d\d)$/
  REGEXP_RAID_NAME = /^guild_raid_name_(\d+)$/

  LANGUAGE_LIST = {
    'en' => 'en',
    'de' => 'de',
    'pl' => 'pl',
    'pt' => 'pt',
    'cs' => 'cs',
    'fr' => 'fr',
    'it' => 'it',
    'es' => 'es',
    'hu' => 'hu',
    'ch' => 'de'
  }

  def initialize(argv:)
  end

  def run
    config = JSON.parse(self.class.get(PLAYA_CONFIG_URL).body)

    # Save list of servers
    servers = config['servers'].each_with_object({}) do |server, memo|
      memo[server['i'].to_s] = server['d']
    end

    File.write('servers.json', JSON.pretty_generate(servers))

    # Save translations
    LANGUAGE_LIST.each do |sftools_language, playa_language|
      FileUtils.mkdir_p("lang/#{sftools_language}")

      strings = decode(self.class.get(format(PLAYA_TRANSLATION_URL, version: config['required_client_version_min'], language: playa_language)).body)

      monsters = strings.select { |key, _| key.match?(REGEXP_MONSTER) }
      monsters = monsters.map do |key, text|
        [
          key[REGEXP_MONSTER, 1].to_i,
          text.split('|').first
        ]
      end.to_h

      File.write("lang/#{sftools_language}/monsters.json", JSON.pretty_generate(monsters))

      items = strings.select { |key, _| key.match?(REGEXP_ITEM) }
      items = items.map do |key, text|
        [
          key,
          text.split('|').first
        ]
      end.to_h

      File.write("lang/#{sftools_language}/items.json", JSON.pretty_generate(items))

      general = strings.select { |key, _| [REGEXP_PET_REQUIREMENT, REGEXP_RAID_NAME].any? { key.match?(_1) } }
      general = general.map do |key, text|
        parsed_key = case key
        when REGEXP_PET_REQUIREMENT
          "pet_requirement_#{%w[shadow light earth fire water].index(Regexp.last_match(1)) * 20 + Regexp.last_match(2).to_i - 1}"
        when REGEXP_RAID_NAME
          "guild_raid_#{Regexp.last_match(1).to_i}"
        else
          key
        end

        [
          parsed_key,
          text.split('|').first.gsub(/<br>/, ' ')
        ]
      end.to_h

      File.write("lang/#{sftools_language}/general.json", JSON.pretty_generate(general))
    end
  end

  private

  def decode(text)
    bytes = text.bytes

    read_value = lambda do |bytes|
      head_len = bytes.shift.ord
      head_len += 64 * (2 * bytes.shift - 2) if bytes.first.ord <= 32
      bytes.shift(head_len).map(&:chr).join
    end
    
    strings = {}
    until bytes.empty?
      key = read_value.call(bytes)
      val = read_value.call(bytes)
      strings[key] = val
    end
    
    hash = Hash[strings.sort_by { |key, val| key.to_s }]
  end
end

Synchronize.new(argv: ARGV).run if __FILE__ == $0
